<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.eunco.demonstrate.dao.UserInfoMapper">
    <resultMap id="BaseResultMap" type="com.eunco.demonstrate.entity.UserInfoEntity">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="userpic" property="userpic" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="question" property="question" jdbcType="VARCHAR"/>
        <result column="answer" property="answer" jdbcType="VARCHAR"/>
        <result column="role" property="role" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="ip" property="ip" jdbcType="VARCHAR"/>
    </resultMap>
    <!-- 根据ID删除对象 -->
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from test_user where id = #{id,jdbcType=INTEGER}
    </delete>
    <!-- 插入数据 -->
    <insert id="insert" parameterType="com.eunco.demonstrate.entity.UserInfoEntity">
        insert into test_user (id, username, password, userpic, email, phone, question, answer, role, create_time, update_time, ip)
        values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
            #{userpic,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
            #{question,jdbcType=VARCHAR}, #{answer,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER},
            now(), now(), #{ip,jdbcType=VARCHAR})
    </insert>
    <!-- 更新数据 -->
    <update id="updateByPrimaryKey" parameterType="com.eunco.demonstrate.entity.UserInfoEntity">
        update test_user
        set username = #{username,jdbcType=VARCHAR},
            password = #{password,jdbcType=VARCHAR},
            userpic = #{userpic,jdbcType=VARCHAR},
            email = #{email,jdbcType=VARCHAR},
            phone = #{phone,jdbcType=VARCHAR},
            question = #{question,jdbcType=VARCHAR},
            answer = #{answer,jdbcType=VARCHAR},
            role = #{role,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            ip = #{ip,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <!-- 根据ID查询数据 -->
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select id, username, password, userpic, email, phone, question, answer, role, create_time,
        update_time, ip from test_user where id = #{id,jdbcType=INTEGER}
    </select>
    <!-- 查询所有数据 -->
    <select id="selectAll" resultMap="BaseResultMap">
        select id, username, password, userpic, email, phone, question, answer, role, create_time, update_time, ip from test_user
    </select>

    <!-- 校验用户名是否重复 -->
    <select id="selectByUsername" parameterType="string" resultType="int">
        SELECT COUNT(username) FROM test_user WHERE username = #{username}
    </select>
    <!-- 判断邮箱是否存在 -->
    <select id="selectByEmail" parameterType="string" resultType="int">
        SELECT COUNT(email) FROM test_user WHERE email = #{email}
    </select>
    <!-- 根据用户名和密码进行查询 -->
    <select id="selectByUsernameAndPassword" parameterType="map" resultMap="BaseResultMap">
        SELECT id, username, userpic, email, phone, question, answer, role, create_time, update_time, ip FROM test_user
        WHERE username = #{username} and password = #{password}
    </select>
</mapper>